Boston$chas
lm.chas=lm(crim~chas)
Boston$chas=factor(Boston$chas,labels=c("N","Y"))
lm.chas=lm(crim~chas)
summary(lm.chas)
head(Boston)
lm.nox=lm(crim~nox)
summary(lm.nox)
head(Boston)
lm.rm=lm(crim~rm)
summary(lm.rm)
head(Boston)
lm.age=lm(crim~age)
lm.dis=lm(crim~dis)
lm.rad=lm(crim~rad)
unique(rad)
dim(Boston)
?count
lenth(unique(tax))
length(unique(tax))
lm.tax=lm(crim~tax)
head(Boston)
lm.pratio=lm(crim~pratio)
lm.ptratio=lm(crim~ptratio)
lm.black=lm(crim~black)
lm.lstat=lm(crim~lstat)
lm.medv=lm(crim~medv)
summary(lm.chas)
lmBoston=lm(crim~.,Boston)
summary(lmBoston)
summary(lm.zn)
coefficients(lm.zn)
coefficients(lm.zn)%>%class
head(Boston)
length(coefficients(lmBoston))
exp=c(coefficients(lm.zn)[2], coefficients(lm.indus)[2], coefficients(lm.chas)[2], coefficients(lm.nox)[2], coefficients(lm.rm)[2], coefficients(lm.age)[2], coefficients(lm.dis)[2], coefficients(lm.rad)[2], coefficients(lm.tax)[2], coefficients(lm.ptratio)[2], coefficients(lm.black)[2], coefficients(lm.lstat)[2], coefficients(lm.medv)[2])
resp=coefficients(lm(Boston))[2:14]
plot(exp,resp)
plot.new()
plot.new()
plot(exp,resp)
df<-data.frame(exp,resp)
df
lm.indus
lmBoston
lm.nox
lmZN=lm(crim ~ poly(zn,3))
lmZn
lmZn=lmZn
lmZn=lmZn
lmZn=lmZN
rm(lmZn)
summary(lmZN)
lmIndus=lm(crim~poly(indus,3))
summary(lmIndus)
lmBlack=lm(crim~poly(black,3))
summary(lmBlack)
lmChas=lm(crim~poly(chas,3))
head(Boston)
summary(lm.chas)
lm.chas
summary(lm.chas)
getwd()
setwd("wk3")
setwd("DataSci_R/AnEdge/wk3/")
getwd()
dir()
songs=read.csv('songs.csv')
table(songs$timesignature)
names(songs)
summary(songs$tempo)
subset(songs,tempo=max(temp))%>%select(songtitle)
library(magrittr)
library(dplyr)
subset(songs,tempo=max(temp))%>%select(songtitle)
subset(songs,tempo==max(temp))%>%select(songtitle)
subset(songs,tempo==max(tempo))%>%select(songtitle)
songs$Year%>%unique
songs$year%>%unique
train = subset(songs,year<2010)
nrow(train)
test=subset(songs,year==2010)
sapply(songs,class)
nonvars = names(songs)[:5]
nonvars = names(songs)[:15]
nonvars = names(songs)[1:5]
nonvars
train = train[,!names(train) %in% nonvars]
dim(train)
head(train)
test = test[,!names(train) %in% nonvars]
mod1 = glm(Top10 ~ ., data=train, family='binomial')
summary(mod1)
cor(train$loudness, train$energy)
cor(train$energy, train$loudness)
names(train)
mod2=glm(Top10~.-loudness,data=train,family='binomial')
summary(mod2)
summary(mod1)
mod3=glm(Top10~.-energy,data=train,family='binomial')
summary(mod3)
summary(mod1)
mod3Predictions = predict(mod3, newdata=test, type='response')
table(test$Top10, mod3Predictions>=0.45)
table(test$Top10, mod3Predictions>=0.45)[1,1]
table(test$Top10, mod3Predictions>=0.45)%>%sum()
t<-table(test$Top10, mod3Predictions>=0.45)
t[1,1]+1[2,2]
t[1,1]+t[2,2]
(t[1,1]+t[2,2])/sum(t)
table(train$Top10)
test$Top10%>%table
314/373
t
table(test$Top10, mod3Predictions>=0.55)
table(test$Top10, mod3Predictions>=0.50)
table(test$Top10, mod3Predictions>=0.52)
table(test$Top10, mod3Predictions>=0.53)
table(test$Top10, mod3Predictions>=0.54)
table(test$Top10, mod3Predictions>=0.55)
table(test$Top10, mod3Predictions>=0.45)
parole=read.csv("parole.csv")
nrow(parole)
head(parole)
sum(parole$violator)
sapply(parole,class)
parole$state=as.factor(parole$state)
praole$crime = as.factor(parole$crime)
parole$crime = as.factor(parole$crime)
sapply(parole,class)
summary(parole)
search()
set.seed(144)
library(caTools)
split=sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole,split)
test=subset(parole,!split)
sapply(parole,class)
mod1=glm(violator~., data=train, family='binomial')
summary(mod1)
exp(1.61)
-4.241+0.887
-3.354%>%exp
1/(1+0.0349)
0.0349/(1+0.0349)
head(test)
d1 = c(1,1,50,1,3,12,0,2)
summary(mod1)
predict(mod1,d1)
d1=c(d1,0)
predict(mod1,d1)
-4.421+0.887
-4.421+0.887%>%exp
exp(-3.354)
predict(mod1, newdata=test, type='response')%>%max()
mod1Preds = predict(mod1, newdata=test, type='response')
head(test)
table(test$violator, mod1Preds>=0.5)
mean(test$violator)
table(test$violator, mod1Preds>=0.3)
table(test$violator, mod1Preds>=0.1)
table(test$violator, mod1Preds>=0.05)
table(test$violator, mod1Preds>=0.5)
179/(179+23)
sum(test$violator)
search()
library(ROCR)
ROCRpred = prediction(mod1Preds, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
loans = read.csv('loans')
loans = read.csv('loans.csv')
str(loans)
mean(loans$not.fully.paid)
sapply(loans,function(x)any(is.na(x)))
sapply(loans,function(x)any(is.na(x)))%>%which()
dim(loans)
!complete.cases(loans)
loans[!complete.cases(loans),]
sapply(loans, function(x)sum(is.na(x)))
loans[!complete.cases(loans),]%>%nrow
loans[!complete.cases(loans),]%>%which()
complete.cases(loans)%>%which()%>%length()
complete.cases(loans)%>%which()
nrow(loans)
complete.cases(loans)%>%which()%>%length()
!complete.cases(loans)%>%which()%>%length()
(!complete.cases(loans))%>%which()%>%length()
(!complete.cases(loans))%>%which()
loans[71:73,]
loans[781:783,]
(!complete.cases(loans))%>%which()
missing_loans = subset(loans, (!complete.cases(loans)%>%which()))
nonMissing_loans = subset(loans, complete.cases(loans)%>%which())
missing_loans = subset(loans, (!complete.cases(loans))%>%which())
missing_loans = subset(loans, (!complete.cases(loans)))
nrow(missing_loans)
nonMissing_loans = subset(loans, complete.cases(loans))
nrow(nonMissing_loans)
mean(missing_loans$not.fully.paid)
mean(nonMissing_loans$not.fully.paid)
mean(loans$not.fully.paid)
knitr::opts_chunk$set(echo = TRUE)
loans = read.csv('loans.csv')
head(loans)
loans = read.csv('loans.csv')
head(loans)
library(magrittr)
library(dplyr)
library(caTools)
library(zoo)
library(ROCR)
library(mice)
set.seed(144)
split = sample.split(loans$not.fully.paid,SplitRatio = 0.7)
train  = subset(loans, split)
test = subset(loans, !split)
loansMod1 = glm(not.fully.paid ~ ., data=loans, family='binomial')
summary(loansMod1)
exp(-0.0895)
loansMod1 = glm(not.fully.paid ~ .-not.fully.paid, data=loans, family='binomial')
summary(loansMod1)
exp(-0.0895)
exp(0.0895)
loansMod1 = glm(not.fully.paid ~ .-not.fully.paid, data=loans, family='binomial')
summary(loansMod1)
mean(loans$not.fully.paid)
predict.risk = predict(loansMod1, newdata = 'test', type = 'response')
predict.risk = predict(loansMod1, newdata = test, type = 'response')
table(test$not.fully.paid, predict.risk>=0.5)
2389+9
(2389+9)/(2389+9+449+10)
1-mean(loans$not.fully.paid)
search()
library(ROCR)
View(loans)
predict.risk = predict(loansMod1, newdata = test, type = 'response')
table(test$not.fully.paid, predict.risk>=0.5)
1-mean(train$not.fully.paid)
table(test$not.fully.paid, predict.risk>=0.5)
t=table(test$not.fully.paid, predict.risk>=0.5)
t
t[1,1]
(t[1,1]+t[2,2])/sum(t)
1-mean(train$not.fully.paid)
ROCRpred = prediction(predict.risk, test$not.fully.paid)
as.numeric(performance(ROCRpred,'auc')@y.values)
cor(traininf)
cor(training)
cor(train)
sapply(train,class)
names(train)
relevantForCor=train[,names(cor)[-2]]
names(relevantForCor)
relevantForCor=train[,-2]
names(relevantForCor)
cor(relevantForCor)
?cor
cor(relevantForCor, use = 'complete.obs')
mod_int.rate = glm(not.fully.paid~int.rate, data = train, family = 'binomial')
summary(mod_int.rate)
cor(train$int.rate, train$fico)
predictions_bivar = predict(mod_int.rate, type = 'response', newdata = test)
max(predictions_bivar)
mod1
loansMod1
max(predict(loansMod1, newdata = test, type = 'response'))
max(predict(loansMod1, newdata = test, type = 'response'))
predictions_bivar = predict(mod_int.rate, type = 'response', newdata = test)
max(predictions_bivar)
table(test$not.fully.paid, predictions_bivar>=0.5)
predictions_bivar
ROCR_bivar_pred = prediction(mod_int.rate, test$not.fully.paid)
ROCR_bivar_pred = prediction(predictions_bivar, test$not.fully.paid)
as.numeric(performance(ROCR_bivar_pred, 'auc')@y.values)
10*exp(0.18)
names(loans)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit*10)
test$int.rate%>%summary
hiInterest=subset(test, int.rate>=0.15)
mean(hiInterest$profit)
hiInterest=subset(test, int.rate>=0.15)
mean(hiInterest$profit)
1-mean(hiInterest$not.fully.paid)
mean(hiInterest$not.fully.paid)
head(hiInterest)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff = sort(hiInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
test$predicted.risk = predict.risk
hiInterest=subset(test, int.rate>=0.15)
mean(hiInterest$profit)
1-mean(hiInterest$not.fully.paid)
cutoff = sort(hiInterest$predicted.risk, decreasing = F)[100]
selectedLoans = subset(hiInterest, predicted.risk<=cutoff)
dim(selectedLoans)
cutoff = sort(hiInterest$predicted.risk, decreasing = F)[100]
selectedLoans = subset(hiInterest, predicted.risk<=cutoff)
selectedLoans$profit%>%sum
selectedLoans$not.fully.paid%>%sum
cutoff = sort(hiInterest$predicted.risk, decreasing = F)[100]
selectedLoans = subset(hiInterest, predicted.risk<=cutoff)
(selectedLoans$profit)%>%sum
(selectedLoans$not.fully.paid)%>%sum
baseball = read.csv('baseball')
baseball = read.csv('baseball.csv')
head(baseball)
str(baseball)
dim(table(baseball$Team, baseball$Year))
length(baseball$Year%>%unique)
39*47
nrow(baseball)
table(baseball$Year)
table(baseball$Year)%>%length()
head(baseball)
baseball = read.csv('baseball.csv')
madePlayoffs = subset(baseball, Playoffs==1)
nrow(madePlayoffs)
tapply(madePlayoffs$Team,madePlayoffs$Year,length)
table(madePlayoffs$Year)
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c(1990,2001)]
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
baseball$NumCompetitors = playoffTbl[as.character(baseball$Year)]
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
baseball$NumCompetitors = playOffTbl[as.character(baseball$Year)]
head(baseball)
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
baseball$NumCompetitors = playOffTbl[as.character(baseball$Year)]
nrow(subset(baseball,NumCompetitors==8))
playOffTbl=table(madePlayoffs$Year)
names(playOffTbl)
playOffTbl[c("1990","2001")]
baseball$NumCompetitors = playOffTbl[as.character(baseball$Year)]
nrow(subset(baseball,NumCompetitors==8))
table(baseball$NumCompetitors)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
table(baseball$WorldSeres)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
table(baseball$WorldSeries)
rm(list=ls())
clear
clear()
clc
stevens = read.csv('stevens.csv')
dir()
setwd("..")
dir()
setwd('wk4')
dir()
stevens = read.csv('stevens.csv')
str(stevens)
table(stevens$Respondent)
table(stevens$Petitioner)
set.seed(3000)
library(caTools)
set.seed(3000)
split = sample.split(stevens$Reverse,splitRatio=0.70)
split = sample.split(stevens$Reverse,SplitRatio = 0.70)
set.seed(3000)
split = sample.split(stevens$Reverse,SplitRatio = 0.70)
train = subset(stevens,split)
test = subset(stevens,!split)
install.packages("rpart")
find.package('rpart')
library(rpart)
install.packages("rpart.plot")
find.package('rpart.plot')
library(rpart.plot)
names(train)
?rpart
StevensTree = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst)
table(Stevens$Circuit)
table(stevens$Circuit)
table(stevens$LowerCourt)
StevensTree = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data=train, method='class', minbucket=25)
?prp
prp(StevensTree)
prp(StevensTree)
PredictCart = predict(StevensTree, newdata=test, type='class' )
getwd()
dir()
file.edit('Unit4_SupremeCourt.R')
table(Test$Reverse,PredictCart)
table(test$Reverse,PredictCart)
table(test$Reverse)
93/(93+77)
table(train$Reverse)
library(ROCR)
predctionCart = prediction(PredictCart, test$Reverse)
str(PredictCart)
str(train$Reverse)
PredictROC = predict(StevensTree, newdata= Test)
PredictROC = predict(StevensTree, newdata= test)
str(PredictROC)
str(PredictCart)
?prediction
head(PredictROC)
predctionCart = prediction(PredictROC[,2], test$Reverse)
predictionCart = prediction(PredictROC[,2], test$Reverse)
perf = performance(predictionCart,"tpr","fpr")
plot(perf)
plot(perf)
as.numeric(performance(predictionCart, "auc")@y.values)
prp(StevensTree)
StevensLowMinBucketTree = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data=train, method='class', minbucket=5)
prp(StevensLowMinBucketTree)
StevensHighMinBucketTree = rpart(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,data=train, method='class', minbucket=100)
prp(StevensHighMinBucketTree)
install.packages('randomForest')
class(train$Reverse)
search()
library(randomForest)
search()
StevensForest= randomForest=(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst, data=train, nTree=200,nodesize=25)
StevensForest= randomForest=(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst,  data=train, nTree=200,nodesize=25)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, ntree=200, nodesize=25 )
class(test$Reverse)
train$Reverse = as.factor(train$Reverse)
test$Reverse = as.factor(test$Reverse)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, ntree=200, nodesize=25 )
PredictForest = predict(StevensForest, newdata=test)
str(PredictForest)
table(test$Reverse, PredictForest)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
# Make predictions
PredictForest = predict(StevensForest, newdata = Test)
table(Test$Reverse, PredictForest)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = train, ntree=200, nodesize=25 )
# Make predictions
PredictForest = predict(StevensForest, newdata = test)
table(test$Reverse, PredictForest)
set.seed(100)
Train = train
rm(train)
Test=test
rm(test)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
PredictForest = predict(StevensForest, newdata=Test)
str(PredictForest)
table(Test$Reverse, PredictForest)
t<-table(Test$Reverse, PredictForest)
(t[1,1]+t[2,2])/sum(t)
set.seed(200)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
PredictForest = predict(StevensForest, newdata=Test)
t<-table(Test$Reverse, PredictForest)
(t[1,1]+t[2,2])/sum(t)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
?trainControl
numFolds = trainControl(method='cv',numFolds=10)
numFolds = trainControl(method='cv',number=10)
?expand.grid
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
str(cpGrid)
cpGrid
?train
train(Reverse~Circuit+Issue+Petitioner+Respondent+LowerCourt+Unconst, data=Train, method="rpart", trControl=numFolds, tuneGrid=cpGrid)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Perform the cross validation
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Perform the cross validation
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
# Perform the cross validation
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid )
R.Veresion
R.Version
R.Version()
StevensTreeSV=rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="class", cp=0.18)
StevensTreeCV=rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="class", cp=0.18)
rm(StevensTreeSV)
PredictCV = predict(StevensTreeCV, newdata=Test, type="class")
table(Test$Reverse, PredictCV)
prp(StevensTreeCV)
prp(StevensTreeCV)
prp(StevensTreeCV)
?save.image
getwd()
save(list=ls(all.names=T),file='SupremeCourt.RData')
dir()
